메모화(memoization)
함수 호출의 결과를 캐시해 두었다가 나중에 재사용하는 것
메모화로 반복 처리를 방지하여 성능을 개선할 수 있는 경우가 있다.
(성능 문제 발생시 필요하면 사용, 필수X)

함수         개요                 사례 위치
memo        컴포넌트 출력을 메모화   TodoItem.jsx
useMemo     함수 결과를 메모화      List.jsx
useCallback 함수 자체를 메모화      App.jsx의 모든 CRUD 함수

# 최적화(메모화) 시기
프로젝트 완성 후(기능 구현 후)
왜냐하면 기능 추가, 수정 시에 메모화가 풀릴 수도 있음

# 언제 최적화할지
1. 비용이 많이 드는 계산 ex) API호출~데이터가공 등의 작업
2. 매우 반복적으로 실행되는 연산 ex) 리스트에 1만개가 렌더링되서 각각 연산
해당 단원 Header에서 했던 memo는 간단한 기능이라 의미없음
TodoItem처럼 사용자에 따라 개수가 많아질 수 있는 컴포넌트
or 함수를 여러개 가지고 있어서 무거운 코드일 때 사용

# 리렌더링 확인하기
React Develop tools-개발자모드-Components-톱니바퀴-Highlight updates when render
렌더링되는 파트 반짝
나눠지는 파티션 기준으로 잘봐야 구분됨